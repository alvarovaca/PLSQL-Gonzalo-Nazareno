// 1. Realiza una función llamada DevolverMejorPuesto que reciba un dorsal y un tipo de etapa y devuelva el
//    mejor puesto en el que dicho corredor terminó una etapa de ese tipo. Debes contemplar las siguientes
//    excepciones: Corredor inexistente, Tipo de etapa incorrecto, Etapa no disputada y Etapa posterior al
//    abandono del corredor. (2 puntos).
	
create or replace function DevolverMejorPuesto(p_dorsal ciclistas.dorsal%type, p_tipo etapas.tipo%type)
return varchar2
is
    v_mejorpuesto   clasificacionetapas.posicion%type
begin
    ComprobarCorredor(p_dorsal);
    ComprobarTipo(p_tipo);
    ComprobarSiDisputada(p_tipo);
    ComprobarAbandonoPrematuro(p_dorsal, p_tipo);
    select min(posicion) into v_mejorpuesto
    from clasificacionetapas
    where dorsal=p_dorsal
    and numetapa in (   select numetapa
                        from etapas 
                        where tipo=p_tipo);
    return v_mejorpuesto;
end DevolverMejorPuesto;
/

create or replace procedure ComprobarCorredor(p_dorsal ciclistas.dorsal%type)
is
	v_dorsal ciclistas.dorsal%type;
begin
	select dorsal into v_dorsal
	from ciclistas
	where dorsal=p_dorsal;
exception
	when NO_DATA_FOUND then
		raise_application_error(-20001,'Corredor inexistente: '||p_dorsal);	
end ComprobarCorredor;
/

create or replace procedure ComprobarTipo(p_tipo etapas.tipo%type)
is
	v_existetipo number;
	e_tipo_inexistente exception;
begin
	select count(*) into v_existetipo
	from etapas
	where tipo=p_tipo;
	if v_existetipo=0 then
		raise e_tipo_inexistente;
	end if;
exception
	when e_tipo_inexistente then
		raise_application_error(-20002,'Tipo de etapa inexistente: '||p_tipo);
end ComprobarTipo;
/

create or replace procedure ComprobarSiDisputada(p_tipo etapas.tipo%type)
is
	v_primeraetapatipo etapas.numetapa%type;
	v_ultimaetapadisputada etapas.numetapa%type;
	e_tipo_inexistente exception;
begin
	select min(numetapa) into v_primeraetapatipo
	from etapas
	where tipo=p_tipo;
	select max(numetapa) into v_ultimaetapadisputada
	from clasificacionesetapas;
	if v_primeraetapatipo>v_ultimaetapadisputada then
		raise e_tipo_nodisputado;
	end if;
exception
	when e_tipo_nodisputado then
		raise_application_error(-20003,'No se han disputado aun etapas de tipo'||p_tipo);
end ComprobarSiDisputada;
/

create or replace procedure ComprobarAbandonoPrematuro(p_dorsal ciclistas.dorsal%type, p_tipo etapas.tipo%type)
is
	v_etapaabandono etapas.numetapa%type;
	v_primeraetapatipo etapas.numetapa%type;
	e_abandono_prematuro exception;
begin
	select min(numetapa) into v_etapaabandono
	from clasificacionesetapas
	where dorsal=p_dorsal and posicion='Abandono';
	select min(numetapa) into v_primeraetapatipo
	from etapas
	where tipo=p_tipo;
	if v_etapaabandono<v_primeraetapatipo then
		raise e_abandono_prematuro;
	end if;
exception
	when e_abandono_prematuro then
		raise_application_error(-20004,'El corredor con dorsal '||p_dorsal||
					       ' abandonó antes de correr etapas de tipo '||p_tipo);
end ComprobarAbandonoPrematuro;
/

// 2. Realiza una función llamada PasarASegundos que reciba una distancia al ganador en horas, minutos y 
//    segundos y devuelva dicha distancia en segundos. Realiza también la función opuesta, Pasarahhmmss que
//    recibe un número de segundos y lo devuelve en formato hh:mm:ss (2 puntos)

create or replace function PasarASegundos(p_distanciaformato clasificacionesetapas.distanciaalganador%type)
return number
is
	v_distenseg number(6);
begin
	v_distenseg:=	to_number(substr(p_distanciaformato,1,2))*3600 +
			to_number(substr(p_distanciaformato,4,2))*60 +
			to_number(substr(p_distanciaformato,6,2));
	return v_distenseg;
end PasarASegundos;
/

create or replace function PasarAHHMMSS(p_numseg number)
return clasificacionesetapas.distanciaalganador%type
is
	v_numhoras 	number;
	v_nummin 	number;
	v_numseg	number;
	v_hhmmmss	clasificacionesetapas.distanciaalganador%type;
begin
	v_numhoras := floor(p_numseg/3600);
	v_nummin := floor(mod(p_numseg/3600)/60);
	v_numseg := mod(mod(p_numseg/3600)/60);
	v_hhmmss:=to_char(v_numhoras)||':'||to_char(v_nummin)||':'||to_char(v_numseg);
	
	return v_hhmmss;
end PasarAHHMMSS;
/

// 3. Realiza una función DevolverSumaDistancias que reciba un dorsal y un número de etapa y devuelva la suma
//    de las distancias a los ganadores de cada etapa en horas, minutos y segundos hasta la etapa recibida
//    como parámetro. Debes contemplar la excepción de que el corredor haya abandonado en alguna etapa, en cuyo
//    caso no se realizará el cálculo. (2 puntos)

create or replace function DevolverSumaDistanciasConFormato(p_dorsal ciclistas.dorsal%type,
							    p_etapa  etapas.numetapa%type)
return clasificacionesetapas.distanciaalganador%type
is
	cursor c_distancias
	select distanciaalganador
	from clasificacionesetapas
	where dorsal=p_dorsal 
	and numetapa<=p_etapa;
	
	v_acum_seg number:=0;
	v_acum_formateado clasificacionesetapas.distanciaalganador%type
begin
	ComprobarAbandono(p_dorsal, p_etapa);
	for v_distancias in c_distancias loop
		v_acum_seg:=v_acum_seg+PasarASegundos(v_distancias.distanciaalganador);
	end loop;
	
	v_acum_formateado:=PasarAHHMMSS(v_acum_seg);
	return v_acum_formateado;
end DevolverSumaDistanciasConFormato;
/

create or replace procedure ComprobarAbandono(p_dorsal ciclistas.dorsal%type, p_etapa  etapas.numetapa%type)
is
	v_abandono number;
begin
	select count(*) into v_abandono
	from clasificacionesetapas
	where posicion='Abandono'
	and dorsal=p_dorsal
	and numetapa<=p_etapa;
	
	if v_abandono!=0 then
		raise_application_error(-20005,	'El ciclista con dorsal ||p_dorsal||
						' abandonó antes de la etapa '||p_etapa);
	end if;
end ComprobarAbandono;
/


// 4. Realiza un procedimiento llamado MostrarClasificacionGeneral que reciba un número de  etapa y muestre la
//    clasificación general al término de dicha etapa con la posición de cada uno de los ciclistas que
//    permanecen aun en carrera ordenados por distancia total al lider. Puedes usar una tabla auxiliar en la
//    base de datos si lo deseas. (3 puntos).

//          1. NombreCorredor CodEquipo 
//          2. NombreCorredor CodEquipo DistanciaTotalalLider
//          3. NombreCorredor CodEquipo DistanciaTotalalLider
//          ...
//
//    La DistanciaTotalalLider se presentará en formato hh:mm:ss

create table temp
(
	dorsal 	number(3),
	distseg	number(6)
);

create or replace procedure MostrarClasificacionGeneral(p_etapa etapas.numetapa%type)
is
begin
	RellenarClasificacion(p_etapa);
	MostrarClasificacion;
end MostrarClasificacionGeneral;
/

create or replace procedure RellenarClasificacion (p_etapa etapas.numetapa%type)
is
	cursor c_corredores is
	select dorsal from clasificacionetapas
	where etapa=p_etapa
	and posicion!='Abandono';
	
	v_distancia number(6);
begin
	delete temp;
	for v_corredores in c_corredores loop
		v_distancia:=DevolverSumaDistanciasSinFormato(v_corredores.dorsal,p_etapa);
		insert into temp
		values(v_corredores.dorsal, v_distancia);
	end loop;
end RellenarClasificacion;
/

create or replace procedure MostrarClasificacion
is
	cursor c_clasificacion
	is
	select dorsal, distseg
	from temp
	order by distseg asc;

	v_retrasolider number;
	v_puesto number:=1;
begin
	open c_clasificacion;
	fetch c_clasificacion into v_corredor;
	v_retrasolider:=v_corredor.distseg;
	MostrarCorredor(v_puesto,v_corredor.dorsal,0);
	fetch c_clasificacion into v_corredor;
	while c_clasificacion%FOUND loop
		v_puesto:=v_puesto+1;
		MostrarCorredor(v_puesto,v_corredor.dorsal,v_corredor.distseg-v_retrasolider);
		fetch c_clasificacion into v_corredor;
	end loop;
	close c_clasificacion;
end MostrarClasificacion;
/

create or replace procedure MostrarCorredor(p_puesto number, p_dorsal ciclistas.dorsal%type, p_dist number)
is
	v_nombreciclista ciclistas.nombre%type;
	v_nombreequipo   equipos.nombre%type;
	v_distHHMMSS	 clasificacionetapas.distanciaalganador%type;
begin
	select c.nombre,e.nombre into v_nombreciclista, v_nombreequipo
	from ciclistas c, equipos e 
	where c.codequipo=e.codequipo
	and dorsal=p_dorsal;
	
	v_distHHMMSS:=PasarAHHMMSS(p_dist);
	
	dbms_output.put_line(p_puesto||'. '||v_nombreciclista||chr(9)||v_nombreequipo||chr(9)||v_distHHMMSS);
end MostrarCorredor;
/

create or replace function DevolverSumaDistanciasSinFormato(p_dorsal ciclistas.dorsal%type,
							    p_etapa  etapas.numetapa%type)
return clasificacionesetapas.distanciaalganador%type
is
	cursor c_distancias
	select distanciaalganador
	from clasificacionesetapas
	where dorsal=p_dorsal 
	and numetapa<=p_etapa;
	
	v_acum_seg number:=0;
	v_acum_formateado clasificacionesetapas.distanciaalganador%type
begin
	ComprobarAbandono(p_dorsal, p_etapa);
	for v_distancias in c_distancias loop
		v_acum_seg:=v_acum_seg+PasarASegundos(v_distancias.distanciaalganador);
	end loop;
	
	return v_acum_seg;
end DevolverSumaDistanciasSinFormato;
/
